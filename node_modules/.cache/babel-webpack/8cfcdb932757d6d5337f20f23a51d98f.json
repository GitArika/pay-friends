{"ast":null,"code":"import { HttpParams, HttpUrlEncodingCodec } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PaymentsService = /*#__PURE__*/(() => {\n  class PaymentsService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = \"http://localhost:3000\";\n    }\n\n    appendFilters(filters) {\n      let params = new HttpParams({\n        encoder: new HttpUrlEncodingCodec()\n      });\n      params = params.append(\"_page\", String(filters === null || filters === void 0 ? void 0 : filters.page));\n      params = params.append(\"_limit\", String(filters === null || filters === void 0 ? void 0 : filters.limit));\n      params = params.append(\"_sort\", String(filters === null || filters === void 0 ? void 0 : filters.sortField));\n      params = params.append(\"_order\", String(filters === null || filters === void 0 ? void 0 : filters.sortOrder));\n      params = params.append(\"username_like\", String((filters === null || filters === void 0 ? void 0 : filters.username) || ``));\n      params = params.append(\"name_like\", String((filters === null || filters === void 0 ? void 0 : filters.name) || ``));\n      params = params.append(\"title_like\", String((filters === null || filters === void 0 ? void 0 : filters.title) || ``));\n      params = params.append(\"date_like\", String((filters === null || filters === void 0 ? void 0 : filters.date) || ``));\n      params = params.append(\"isPayed_like\", String((filters === null || filters === void 0 ? void 0 : filters.isPayed) || ``));\n      params = params.append(\"value_like\", String((filters === null || filters === void 0 ? void 0 : filters.value) || ``));\n      params = params.append(\"Access-Control-Expose-Headers\", \"X-Total-Count\");\n      return params;\n    }\n\n    getPayments(filters) {\n      const params = this.appendFilters(filters);\n      return this.http.get(`${this.baseUrl}/payments`, {\n        responseType: \"json\",\n        observe: \"response\",\n        params\n      });\n    }\n\n    deletePayment(id) {\n      return this.http.delete(`${this.baseUrl}/payments/${id}`);\n    }\n\n    includePayment(payment) {\n      return this.http.post(`${this.baseUrl}/payments`, payment);\n    }\n\n    editPayment(payment) {\n      const {\n        id\n      } = payment;\n      delete payment.id;\n      return this.http.put(`${this.baseUrl}/payments/${id}`, payment);\n    }\n\n  }\n\n  PaymentsService.ɵfac = function PaymentsService_Factory(t) {\n    return new (t || PaymentsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PaymentsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PaymentsService,\n    factory: PaymentsService.ɵfac\n  });\n  return PaymentsService;\n})();","map":null,"metadata":{},"sourceType":"module"}