{"ast":null,"code":"import { Keys } from \"src/app/constants/keys\";\nimport { Exceptions } from \"../../constants/exceptions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-toastify\";\nexport let Validator = /*#__PURE__*/(() => {\n  class Validator {\n    constructor(toastService) {\n      this.toastService = toastService;\n    }\n\n    emailValidation(email) {\n      const emailValidation = new RegExp(\"^(.+)@(.+)$\");\n      const validEmail = emailValidation.test(email);\n\n      if (!validEmail) {\n        this.toastService.error(Exceptions.invalidEmail);\n        return {\n          valid: false,\n          key: Keys.email\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n    passwordValidation(password) {\n      if (!password || password.trim() == \"\") {\n        this.toastService.error(Exceptions.invalidPassword);\n        return {\n          valid: false,\n          key: Keys.password\n        };\n      } else if (password.length < 6) {\n        this.toastService.error(Exceptions.invalidPasswordLength);\n        return {\n          valid: false,\n          key: Keys.password\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n    passwordConfirmationValidation(password, passwordConfirmation) {\n      if (password != passwordConfirmation) {\n        this.toastService.error(Exceptions.invalidPasswordConfirmation);\n        return {\n          valid: false,\n          key: Keys.passwordConfirmation\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n    nameValidation(name) {\n      if (name.trim() == \"\") {\n        this.toastService.error(Exceptions.invalidName);\n        return {\n          valid: false,\n          key: Keys.name\n        };\n      } else if (name.length < 3) {\n        this.toastService.error(Exceptions.invalidNameLength);\n        return {\n          valid: false,\n          key: Keys.name\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n    usernameValidation(username) {\n      if (username.trim() == \"\") {\n        this.toastService.error(Exceptions.invalidUsername);\n        return {\n          valid: false,\n          key: Keys.username\n        };\n      } else if (username.length < 3) {\n        this.toastService.error(Exceptions.invalidNameLength);\n        return {\n          valid: false,\n          key: Keys.username\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n    numberValidation(value) {\n      if (value == undefined) {\n        this.toastService.error(Exceptions.invalidNumber);\n        return {\n          valid: false,\n          key: Keys.value\n        };\n      } else if (value < 0) {\n        this.toastService.error(Exceptions.negativeNumber);\n        return {\n          valid: false,\n          key: Keys.value\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n    titleValidation(title) {\n      if (!title || title.trim() == \"\") {\n        this.toastService.error(Exceptions.titleInvalid);\n        return {\n          valid: false,\n          key: Keys.title\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n    dateValidation(date) {\n      if (!date) {\n        this.toastService.error(Exceptions.dateInvalid);\n        return {\n          valid: false,\n          key: Keys.picker\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n\n  }\n\n  Validator.ɵfac = function Validator_Factory(t) {\n    return new (t || Validator)(i0.ɵɵinject(i1.ToastService));\n  };\n\n  Validator.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Validator,\n    factory: Validator.ɵfac\n  });\n  return Validator;\n})();","map":null,"metadata":{},"sourceType":"module"}