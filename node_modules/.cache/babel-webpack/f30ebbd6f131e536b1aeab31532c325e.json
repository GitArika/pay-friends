{"ast":null,"code":"import { tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular-toastify\";\nimport * as i3 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, toastService, router) {\n      this.http = http;\n      this.toastService = toastService;\n      this.router = router;\n      this.baseUrl = \"http://localhost:3000\";\n    }\n\n    get token() {\n      return this._token;\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    canActivate(route, state) {\n      const valid = this.token && this.token.trim() != \"\";\n\n      if (!valid) {\n        this.toastService.error(\"Usuário não autorizado!\");\n        this.router.navigate([\"/\"]);\n      }\n\n      return valid;\n    }\n\n    signin(auth) {\n      delete auth[\"passwordConfirmation;\"];\n      return this.http.post(`${this.baseUrl}/signin`, auth).pipe(tap({\n        next: event => {\n          this._token = event === null || event === void 0 ? void 0 : event.accessToken;\n          this._id = event === null || event === void 0 ? void 0 : event.user.id;\n          return event;\n        }\n      }));\n    }\n\n    signup(user) {\n      return this.http.post(`${this.baseUrl}/signup`, user);\n    }\n\n    getUser(id) {\n      return this.http.get(`${this.baseUrl}/users/${id}`, {\n        observe: \"response\"\n      });\n    }\n\n    updateProfile(user) {\n      const safeUser = Object.assign({}, user);\n      const {\n        id\n      } = safeUser;\n      delete safeUser[\"passwordConfirmation\"];\n      delete safeUser[\"id\"];\n      return this.http.put(`${this.baseUrl}/users/${id}`, safeUser);\n    }\n\n    updatePassword(user) {\n      const safeUser = Object.assign({}, user);\n      const {\n        id\n      } = safeUser;\n      delete safeUser[\"passwordConfirmation\"];\n      delete safeUser[\"id\"];\n      return this.http.put(`${this.baseUrl}/users/${id}`, safeUser);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastService), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}